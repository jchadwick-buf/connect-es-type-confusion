// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file example.proto (package example.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message example.v1.MessageA
 */
export class MessageA extends Message<MessageA> {
  /**
   * @generated from field: string field_a = 1;
   */
  fieldA = "";

  constructor(data?: PartialMessage<MessageA>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "example.v1.MessageA";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "field_a", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageA {
    return new MessageA().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageA {
    return new MessageA().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageA {
    return new MessageA().fromJsonString(jsonString, options);
  }

  static equals(a: MessageA | PlainMessage<MessageA> | undefined, b: MessageA | PlainMessage<MessageA> | undefined): boolean {
    return proto3.util.equals(MessageA, a, b);
  }
}

/**
 * @generated from message example.v1.MessageB
 */
export class MessageB extends Message<MessageB> {
  /**
   * @generated from field: string field_a = 1;
   */
  fieldA = "";

  /**
   * @generated from field: int64 field_b = 2;
   */
  fieldB = protoInt64.zero;

  constructor(data?: PartialMessage<MessageB>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "example.v1.MessageB";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "field_a", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "field_b", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageB {
    return new MessageB().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageB {
    return new MessageB().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageB {
    return new MessageB().fromJsonString(jsonString, options);
  }

  static equals(a: MessageB | PlainMessage<MessageB> | undefined, b: MessageB | PlainMessage<MessageB> | undefined): boolean {
    return proto3.util.equals(MessageB, a, b);
  }
}

/**
 * @generated from message example.v1.MessageC
 */
export class MessageC extends Message<MessageC> {
  /**
   * @generated from field: int64 field_b = 2;
   */
  fieldB = protoInt64.zero;

  constructor(data?: PartialMessage<MessageC>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "example.v1.MessageC";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "field_b", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageC {
    return new MessageC().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageC {
    return new MessageC().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageC {
    return new MessageC().fromJsonString(jsonString, options);
  }

  static equals(a: MessageC | PlainMessage<MessageC> | undefined, b: MessageC | PlainMessage<MessageC> | undefined): boolean {
    return proto3.util.equals(MessageC, a, b);
  }
}

/**
 * @generated from message example.v1.Empty
 */
export class Empty extends Message<Empty> {
  constructor(data?: PartialMessage<Empty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "example.v1.Empty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Empty {
    return new Empty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Empty {
    return new Empty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Empty {
    return new Empty().fromJsonString(jsonString, options);
  }

  static equals(a: Empty | PlainMessage<Empty> | undefined, b: Empty | PlainMessage<Empty> | undefined): boolean {
    return proto3.util.equals(Empty, a, b);
  }
}

